// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?     @default("user")
  isActive      Boolean     @default(true)
  accounts      Account[]
  sessions      Session[]
  accessLogs    AccessLog[]
  perks         UserPerk[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String      @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String
  capacity    Int?
  accessLogs  AccessLog[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model AccessLog {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Perk {
  id                 String    @id @default(cuid())
  name               String
  description        String
  type               String
  resourceUrl        String?
  externalCourseUrl  String?
  certificateUrl     String?
  validFrom          DateTime?
  validUntil         DateTime?
  isDownloadable     Boolean   @default(false)
  hasPhysicalDelivery Boolean  @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  users              UserPerk[]
}

model UserPerk {
  id        String   @id @default(cuid())
  userId    String
  perkId    String
  assignedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  perk      Perk     @relation(fields: [perkId], references: [id], onDelete: Cascade)

  @@unique([userId, perkId])
  @@index([userId])
  @@index([perkId])
} 